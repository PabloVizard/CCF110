exerc1 ------------------------------------------------------------------------------
void asteristico(int num, int cont){
    int i,j;

    //parametro de analise para fazer print
    if(cont!=0){
        for(i=0; i<num; i++){
            printf("* ");
        }
        printf("\n");
        return asteristico(num, cont-1);
    }
    else if(cont==0){
        return;
    }
}

int main() {
    int n, temp;

    //ler o valor que a função irá se repetir
    scanf("%d", &n);
    temp = n;

    //passar parametro para função fazer a repetição de *
    asteristico(n, temp);
}

exerc2 ------------------------------------------------------------------------------
void multiplo(int num, int term){
    if(num<=term){
        if(num%5==0){
            printf("%d ", num);
        }
        return multiplo(num+1, term);
    }
}

int main() {
    int n, t;
    //entrada dos valores de parametro
    scanf("%d %d", &n, &t);
    //passagem de termos pra função recursiva
    multiplo(n,t);
}

exerc3 ------------------------------------------------------------------------------
void tabuada(int num, int cont){
    if(cont<=num){
        printf("%d x %d = %d\n", cont, num, cont*num);
        return tabuada(num, cont+1);
    }
}

int main() {
    int n, t=1;
    //entrada dos valores de parametro
    scanf("%d", &n);
    //passagem de valores para formar a tabuada
    tabuada(n,t);
}

exerc4 ------------------------------------------------------------------------------
void multiplo(int num){
    if(num<=100){
        if(num%2!=0){
            printf("%d ", num);
        }
        return multiplo(num+1);
    }
}

int main() {
    int n=0;
    //passagem de termos pra função recursiva
    multiplo(n);
}

exerc5 ------------------------------------------------------------------------------
void mdc(int x, int y){
    if(x>y){
        return mdc(x-y, y);
    }
    else if(x==y){
        printf("%d", x);
    }
    else if(x<y){
        return mdc(y, x);
    }
}

int main() {
    int a,b;
    scanf("%d %d", &a, &b);
    //passagem de termos pra função recursiva
    mdc(a, b);
}

exerc6 -------------------------------------------------------------------------------
int fatorial(int x){
    int fat;
    if(x==0){
        return 1;
    }
    else{
        fat = x*fatorial(x-1);
        return fat;
    }
}

int main() {
    int a, fat;
    scanf("%d", &a);
    fat = fatorial(a);
    printf("%d", fat);
}

exerc7 -----------------------------------------------------------------------------
int fibonnacci(int n){
    int fibo;
    if(n==1 || n==2){
        return 1;
    }
    else{
        fibo = fibonnacci(n-1)+fibonnacci(n-2);
        return fibo;
    }
}

int main() {
    int a, fib;
    scanf("%d", &a);
    fib = fibonnacci(a);
    printf("%d", fib);
}

exerc7b ------------------------------------------------------------------------------
int fibonnacci(int n){
    int fibo;
    if(n==1 || n==2){
        return 1;
    }
    else{
        fibo = fibonnacci(n-1)+fibonnacci(n-2);
        return fibo;
    }
}

int main() {
    int a=20, fib;
    fib = fibonnacci(a);
    printf("%d", fib);
}

exerc8 ------------------------------------------------------------------------------
int div(int x, int y){
    int di;
    if(x<y){
        return 0;
    } else if(x==y){
        return 1;
    } else if(x>y){
        di = 1 + div(x-y, y);
        return di;
    }
}

int main() {
    int a, b, d;
    scanf("%d %d", &a, &b);
    d = div(a,b);
    printf("%d", d);
}

exerc9 -------------------------------------------------------------------------------
int mod(int x, int y){
    int m;
    if(x<y){
        return x;
    } else if(x==y){
        return 0;
    } else if(x>y){
        m = mod(x-y, y);
        return m;
    }
}

int main() {
    int a, b, m;
    scanf("%d %d", &a, &b);
    m = mod(a,b);
    printf("%d", m);
}